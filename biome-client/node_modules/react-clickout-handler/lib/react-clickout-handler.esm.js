import React, { Component } from 'react';

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var ClickOutHandler = function (_Component) {
  inherits(ClickOutHandler, _Component);

  function ClickOutHandler() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ClickOutHandler);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ClickOutHandler.__proto__ || Object.getPrototypeOf(ClickOutHandler)).call.apply(_ref, [this].concat(args))), _this), _this.handleClickOut = function (ev) {
      if (_this.shouldFire(ev)) _this.props.onClickOut(ev);
    }, _this.setRef = function (el) {
      _this.wrapper = el;
    }, _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ClickOutHandler, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      this.props.events.forEach(function (event) {
        document.addEventListener(event, _this2.handleClickOut);
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var _this3 = this;

      this.props.events.forEach(function (event) {
        document.removeEventListener(event, _this3.handleClickOut);
      });
    }
  }, {
    key: 'shouldFire',
    value: function shouldFire(ev) {
      return this.props.enabled && this.wrapper && !this.wrapper.contains(ev.target) && !this.props.ignoredElements.some(function (element) {
        return element && element.contains(ev.target);
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          refProp = _props.refProp,
          wrapWith = _props.wrapWith;

      var props = defineProperty({}, refProp, this.setRef);

      if (typeof children === 'function') {
        return children(props);
      }

      if (Array.isArray(children) || wrapWith) {
        var Wrapped = wrapWith || 'div';

        return React.createElement(
          Wrapped,
          props,
          children
        );
      }

      return React.cloneElement(React.Children.only(children), props);
    }
  }]);
  return ClickOutHandler;
}(Component);

ClickOutHandler.defaultProps = {
  enabled: true,
  events: ['mousedown', 'touchstart'],
  ignoredElements: [],
  refProp: 'ref',
  wrapWith: null
};

export default ClickOutHandler;
